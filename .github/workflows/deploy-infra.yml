name: Deploy Azure Function App

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Check and Create Resource Group
        run: |
          if ! az group exists --name crypto-pilot-rg-dev; then
            az group create --name crypto-pilot-rg-dev --location uksouth
          else
            echo "Resource group crypto-pilot-rg-dev already exists"
          fi

      - name: Check and Create Function App AAD registration
        run: |
          EXISTING_FUNC_APP=$(az ad app list --display-name "crypto-pilot-functionapp" --query "[0].appId" -o tsv)
          if [ -z "$EXISTING_FUNC_APP" ]; then
            FUNC_APP_ID=$(az ad app create --display-name "crypto-pilot-functionapp" \
              --sign-in-audience AzureADMyOrg \
              --app-roles '[{"allowedMemberTypes":["User"],"description":"User","displayName":"User","id":"'$(uuidgen)'","isEnabled":true,"value":"User"}]' \
              --query appId -o tsv)
          else
            FUNC_APP_ID=$EXISTING_FUNC_APP
            echo "Function app registration already exists"
          fi
          echo "FUNCTION_APP_CLIENT_ID=$FUNC_APP_ID" >> $GITHUB_ENV

      - name: Check and Create Web App AAD registration
        run: |
          EXISTING_WEB_APP=$(az ad app list --display-name "crypto-pilot-webapp" --query "[0].appId" -o tsv)
          if [ -z "$EXISTING_WEB_APP" ]; then
            WEB_APP_ID=$(az ad app create --display-name "crypto-pilot-webapp" \
              --sign-in-audience AzureADMyOrg \
              --enable-id-token-issuance true \
              --enable-access-token-issuance true \
              --web-redirect-uris "http://localhost:5173" "https://crypto-pilot-webapp.azurewebsites.net" \
              --query appId -o tsv)
          else
            WEB_APP_ID=$EXISTING_WEB_APP
            echo "Web app registration already exists"
          fi
          echo "WEB_APP_CLIENT_ID=$WEB_APP_ID" >> $GITHUB_ENV

      - name: Deploy Bicep
        id: deploy_bicep
        run: |
          az deployment group create \
            --resource-group crypto-pilot-rg-dev \
            --template-file .github/workflows/main.bicep \
            --parameters \
              sqlAdminLogin='${{ secrets.SQL_ADMIN_LOGIN }}' \
              sqlAdminPassword='${{ secrets.SQL_ADMIN_PASSWORD }}' \
              acsEmailDomainName='crypto-pilot-email-domain' \
              functionAppClientId='${{ env.FUNCTION_APP_CLIENT_ID }}' \
              webAppClientId='${{ env.WEB_APP_CLIENT_ID }}' \
            --output json > bicep_output.json

      - name: Get function app name from Bicep output
        id: get_funcapp_name
        run: |
          echo "FUNCTION_APP_NAME=$(jq -r '.properties.outputs.functionAppName.value' bicep_output.json)" >> $GITHUB_ENV

      - name: Get web app name from Bicep output
        id: get_webapp_name
        run: |
          WEBAPP_NAME=$(jq -r '.properties.outputs.webAppName.value' bicep_output.json)
          if [ -z "$WEBAPP_NAME" ]; then
            echo "Error: WEBAPP_NAME is not set. Check Bicep output."
            exit 1
          fi
          echo "WEBAPP_NAME=$WEBAPP_NAME" >> $GITHUB_ENV

      - name: Get SQL server and database names from Bicep output
        id: get_sql_names
        run: |
          echo "SQL_SERVER_NAME=$(jq -r '.properties.outputs.sqlServerName.value' bicep_output.json)" >> $GITHUB_ENV
          echo "SQL_DATABASE_NAME=$(jq -r '.properties.outputs.sqlDatabaseName.value' bicep_output.json)" >> $GITHUB_ENV

      - name: Get email sender address and domain resource id from Bicep output
        id: get_email_settings
        run: |
          echo "EMAIL_SENDER_ADDRESS=$(jq -r '.properties.outputs.emailSenderAddress.value' bicep_output.json)" >> $GITHUB_ENV
          echo "EMAIL_DOMAIN_RESOURCE_ID=$(jq -r '.properties.outputs.acsEmailDomainResourceId.value' bicep_output.json)" >> $GITHUB_ENV

      # .NET setup with cache
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Publish Azure Function
        run: |
          dotnet publish ./Crypto.Pylot.Functions/Crypto_Pylot_Functions.csproj -c Release -o ./publish_output

      - name: Deploy to Azure Function App
        uses: azure/functions-action@v1
        with:
          app-name: ${{ env.FUNCTION_APP_NAME }}
          package: ./publish_output

      # Check and install sqlcmd only if needed
      - name: Check if sqlcmd is installed
        id: check-sqlcmd
        shell: bash
        run: |
          if command -v sqlcmd >/dev/null 2>&1; then
            echo "available=true" >> $GITHUB_OUTPUT
          else
            echo "available=false" >> $GITHUB_OUTPUT
          fi

      - name: Install sqlcmd on Linux
        if: runner.os == 'Linux' && steps.check-sqlcmd.outputs.available != 'true'
        shell: bash
        run: |
          set -e
          curl https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/prod.list | sudo tee /etc/apt/sources.list.d/mssql-release.list
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y msodbcsql18 mssql-tools18
          echo 'export PATH="$PATH:/opt/mssql-tools18/bin"' >> ~/.bashrc
          source ~/.bashrc
          echo '/opt/mssql-tools18/bin' >> $GITHUB_PATH

      - name: Add GitHub Actions runner IP to Azure SQL Server firewall
        env:
          AZURE_SQL_SERVER: ${{ env.SQL_SERVER_NAME }}
        run: |
          IP=$(curl -s https://api.ipify.org)
          az sql server firewall-rule create \
            --resource-group crypto-pilot-rg-dev \
            --server $AZURE_SQL_SERVER \
            --name "github-actions-runner" \
            --start-ip-address $IP \
            --end-ip-address $IP

      - name: Deploy database schema
        env:
          SQL_SERVER: ${{ env.SQL_SERVER_NAME }}
          SQL_DB: ${{ env.SQL_DATABASE_NAME }}
          SQL_USER: ${{ secrets.SQL_ADMIN_LOGIN }}
          SQL_PASSWORD: ${{ secrets.SQL_ADMIN_PASSWORD }}
        run: |
          sqlcmd -S "$SQL_SERVER.database.windows.net" -d "$SQL_DB" -U "$SQL_USER" -P "$SQL_PASSWORD" -i "./Crypto.Pilot.Database/create-tables.sql"

      # --- Begin: Deploy Crypto.Pilot.Web as Azure Web App (App Service) ---
      - name: Set Authentication Variables
        run: |
          TENANT_ID=$(az account show --query tenantId -o tsv)
          AUTHORITY_URL="https://login.microsoftonline.com/$TENANT_ID"
          API_SCOPE="api://${{ env.FUNCTION_APP_CLIENT_ID }}/user_impersonation"
          echo "VITE_AZURE_AD_AUTHORITY=$AUTHORITY_URL" >> $GITHUB_ENV
          echo "VITE_AZURE_AD_CLIENT_ID=${{ env.WEB_APP_CLIENT_ID }}" >> $GITHUB_ENV
          echo "VITE_AZURE_FUNCTION_API_SCOPE=$API_SCOPE" >> $GITHUB_ENV

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ./Crypto.Pilot.Web/package-lock.json

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: ./Crypto.Pilot.Web/node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('Crypto.Pilot.Web/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install dependencies (web)
        working-directory: ./Crypto.Pilot.Web
        run: npm ci

      # Build with environment variables
      - name: Build React app
        working-directory: ./Crypto.Pilot.Web
        env:
          VITE_AZURE_AD_AUTHORITY: ${{ env.VITE_AZURE_AD_AUTHORITY }}
          VITE_AZURE_AD_CLIENT_ID: ${{ env.VITE_AZURE_AD_CLIENT_ID }}
          VITE_AZURE_FUNCTION_API_SCOPE: ${{ env.VITE_AZURE_FUNCTION_API_SCOPE }}
        run: npm run build

      - name: Zip web build output
        run: |
          cd ./Crypto.Pilot.Web/dist
          zip -r ../../webapp.zip .
          cd ../..

      - name: Get Web App Publish Profile
        id: get-publish-profile
        run: |
          if [ -z "${{ env.WEBAPP_NAME }}" ]; then
            echo "Error: WEBAPP_NAME is not set. Cannot retrieve publish profile."
            exit 1
          fi
          PUBLISH_PROFILE=$(az webapp deployment list-publishing-profiles \
            --resource-group crypto-pilot-rg-dev \
            --name ${{ env.WEBAPP_NAME }} \
            --xml --output tsv)
          echo "WEBAPP_PUBLISH_PROFILE=$PUBLISH_PROFILE" >> $GITHUB_ENV

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.WEBAPP_NAME }}
          publish-profile: ${{ env.WEBAPP_PUBLISH_PROFILE }}
          package: ./webapp.zip

      # Also set the variables in the Web App for runtime
      - name: Configure Web App Settings
        run: |
          az webapp config appsettings set \
            --resource-group crypto-pilot-rg-dev \
            --name ${{ env.WEBAPP_NAME }} \
            --settings \
              VITE_AZURE_AD_AUTHORITY="${{ env.VITE_AZURE_AD_AUTHORITY }}" \
              VITE_AZURE_AD_CLIENT_ID="${{ env.VITE_AZURE_AD_CLIENT_ID }}" \
              VITE_AZURE_FUNCTION_API_SCOPE="${{ env.VITE_AZURE_FUNCTION_API_SCOPE }}"
      # --- End: Deploy Crypto.Pilot.Web as Azure Web App (App Service) ---
