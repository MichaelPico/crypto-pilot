name: Deploy Azure Function App

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create resource group if not exists
        run: |
          az group create --name crypto-pilot-rg-dev --location uksouth

      - name: Deploy Bicep
        id: deploy_bicep
        run: |
          az deployment group create \
            --resource-group crypto-pilot-rg-dev \
            --template-file .github/workflows/main.bicep \
            --parameters \
              sqlAdminLogin='${{ secrets.SQL_ADMIN_LOGIN }}' \
              sqlAdminPassword='${{ secrets.SQL_ADMIN_PASSWORD }}' \
              acsEmailDomainName='crypto-pilot-email-domain' \
            --output json > bicep_output.json

      - name: Get function app name from Bicep output
        id: get_funcapp_name
        run: |
          echo "FUNCTION_APP_NAME=$(jq -r '.properties.outputs.functionAppName.value' bicep_output.json)" >> $GITHUB_ENV

      - name: Get web app name from Bicep output
        id: get_webapp_name
        run: |
          echo "WEBAPP_NAME=$(jq -r '.properties.outputs.webAppName.value' bicep_output.json)" >> $GITHUB_ENV

      - name: Get SQL server and database names from Bicep output
        id: get_sql_names
        run: |
          echo "SQL_SERVER_NAME=$(jq -r '.properties.outputs.sqlServerName.value' bicep_output.json)" >> $GITHUB_ENV
          echo "SQL_DATABASE_NAME=$(jq -r '.properties.outputs.sqlDatabaseName.value' bicep_output.json)" >> $GITHUB_ENV

      - name: Get email sender address and domain resource id from Bicep output
        id: get_email_settings
        run: |
          echo "EMAIL_SENDER_ADDRESS=$(jq -r '.properties.outputs.emailSenderAddress.value' bicep_output.json)" >> $GITHUB_ENV
          echo "EMAIL_DOMAIN_RESOURCE_ID=$(jq -r '.properties.outputs.acsEmailDomainResourceId.value' bicep_output.json)" >> $GITHUB_ENV

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Publish Azure Function
        run: |
          dotnet publish ./Crypto.Pylot.Functions/Crypto_Pylot_Functions.csproj -c Release -o ./publish_output

      - name: Deploy to Azure Function App
        uses: azure/functions-action@v1
        with:
          app-name: ${{ env.FUNCTION_APP_NAME }}
          package: ./publish_output

      - name: Check if sqlcmd is installed
        id: check-sqlcmd
        shell: pwsh
        run: |
          if ($null -ne (Get-Command sqlcmd -ErrorAction SilentlyContinue)) {
            echo "available=true" >> $env:GITHUB_OUTPUT
          } else {
            echo "available=false" >> $env:GITHUB_OUTPUT
          }

      - name: Install sqlcmd on Linux
        if: runner.os == 'Linux' && steps.check-sqlcmd.outputs.available != 'true'
        shell: bash
        run: |
          curl https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/prod.list | sudo tee /etc/apt/sources.list.d/mssql-release.list
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y msodbcsql18 mssql-tools18
          echo 'export PATH="$PATH:/opt/mssql-tools18/bin"' >> ~/.bashrc
          source ~/.bashrc
          echo '/opt/mssql-tools18/bin' >> $GITHUB_PATH

      - name: Add GitHub Actions runner IP to Azure SQL Server firewall
        env:
          AZURE_SQL_SERVER: ${{ env.SQL_SERVER_NAME }}
        run: |
          IP=$(curl -s https://api.ipify.org)
          az sql server firewall-rule create \
            --resource-group crypto-pilot-rg-dev \
            --server $AZURE_SQL_SERVER \
            --name "github-actions-runner" \
            --start-ip-address $IP \
            --end-ip-address $IP

      - name: Deploy database schema
        env:
          SQL_SERVER: ${{ env.SQL_SERVER_NAME }}
          SQL_DB: ${{ env.SQL_DATABASE_NAME }}
          SQL_USER: ${{ secrets.SQL_ADMIN_LOGIN }}
          SQL_PASSWORD: ${{ secrets.SQL_ADMIN_PASSWORD }}
        run: |
          sqlcmd -S "$SQL_SERVER.database.windows.net" -d "$SQL_DB" -U "$SQL_USER" -P "$SQL_PASSWORD" -i "./Crypto.Pilot.Database/create-tables.sql"

      # --- Begin: Deploy Crypto.Pilot.Web as Azure Web App (App Service) ---
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies (web)
        working-directory: ./Crypto.Pilot.Web
        run: npm ci

      - name: Build React app
        working-directory: ./Crypto.Pilot.Web
        run: npm run build

      - name: Zip web build output
        run: |
          cd ./Crypto.Pilot.Web/dist
          zip -r ../../webapp.zip .
          cd ../..

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: ./webapp.zip
      # --- End: Deploy Crypto.Pilot.Web as Azure Web App (App Service) ---
