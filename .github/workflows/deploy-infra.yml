name: Deploy Azure Function App

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Check and Create Resource Group
        run: |
          if ! az group exists --name crypto-pilot-rg-dev; then
            az group create --name crypto-pilot-rg-dev --location uksouth
          else
            echo "Resource group crypto-pilot-rg-dev already exists"
          fi

      - name: Check and Create Function App AAD registration
        run: |
          EXISTING_FUNC_APP=$(az ad app list --display-name "crypto-pilot-functionapp" --query "[0].appId" -o tsv)
          if [ -z "$EXISTING_FUNC_APP" ]; then
            FUNC_APP_ID=$(az ad app create --display-name "crypto-pilot-functionapp" \
              --sign-in-audience AzureADMyOrg \
              --app-roles '[{"allowedMemberTypes":["User"],"description":"User","displayName":"User","id":"'$(uuidgen)'","isEnabled":true,"value":"User"}]' \
              --query appId -o tsv)
          else
            FUNC_APP_ID=$EXISTING_FUNC_APP
            echo "Function app registration already exists"
          fi
          echo "FUNCTION_APP_CLIENT_ID=$FUNC_APP_ID" >> $GITHUB_ENV

      - name: Check and Create Azure Static Web App
        id: create_swa
        run: |
          EXISTING_SWA=$(az staticwebapp show --name "crypto-pilot-webapp" --resource-group "crypto-pilot-rg-dev" --query "defaultHostname" -o tsv 2>/dev/null || echo "")
          if [ -z "$EXISTING_SWA" ]; then
            echo "Creating new Static Web App..."
            az staticwebapp create \
              --name "crypto-pilot-webapp" \
              --resource-group "crypto-pilot-rg-dev" \
              --location "westeurope" \
              --sku "Standard" \
              --tags purpose=demo environment=dev \
              --deployment-token-timeout 10 \
              --disable-template-repository true
            
            # Wait for a few seconds to ensure the app is created
            sleep 10
            
            SWA_URL=$(az staticwebapp show --name "crypto-pilot-webapp" --resource-group "crypto-pilot-rg-dev" --query "defaultHostname" -o tsv)
            if [ -z "$SWA_URL" ]; then
              echo "Error: Failed to create Static Web App"
              exit 1
            fi
          else
            SWA_URL=$EXISTING_SWA
            echo "Using existing Static Web App with URL: $SWA_URL"
          fi
          echo "SWA_URL=$SWA_URL" >> $GITHUB_ENV

      - name: Check and Create Web App AAD registration
        run: |
          EXISTING_WEB_APP=$(az ad app list --display-name "crypto-pilot-webapp" --query "[0].appId" -o tsv)
          if [ -z "$EXISTING_WEB_APP" ]; then
            echo "No existing Web App AAD registration found. Creating from scratch..."
            WEB_APP_ID=$(az ad app create --display-name "crypto-pilot-webapp" \
              --sign-in-audience AzureADMyOrg \
              --enable-id-token-issuance true \
              --enable-access-token-issuance true \
              --web-redirect-uris "http://localhost:5173" \
              --query appId -o tsv)
            az ad sp create --id $WEB_APP_ID

            # Set redirect URIs and patch SPA settings using the Static Web App URL
            az ad app update --id $WEB_APP_ID --web-redirect-uris "http://localhost:5173" "https://${{ env.SWA_URL }}"
            OBJECT_ID=$(az ad app show --id $WEB_APP_ID --query id -o tsv)
            az rest --method patch \
              --uri "https://graph.microsoft.com/v1.0/applications/$OBJECT_ID" \
              --headers "{'Content-Type': 'application/json'}" \
              --body "{\"spa\":{\"redirectUris\":[\"http://localhost:5173\",\"https://${{ env.SWA_URL }}\",\"https://${{ env.SWA_URL }}/\"]}}"

            # Rest of the AAD configuration...
            az ad app permission add --id $WEB_APP_ID --api 00000003-0000-0000-c000-000000000000 --api-permissions e1fe6dd8-ba31-4d61-89e7-88639da4683d=Scope
            az ad app update --id $WEB_APP_ID --identifier-uris "api://$WEB_APP_ID"
            az ad app update --id $WEB_APP_ID --set api=@templates/oauth2Permissions.json
            az rest --method patch \
              --uri "https://graph.microsoft.com/v1.0/applications/$OBJECT_ID" \
              --headers "Content-Type: application/json" \
              --body '{"api":{"requestedAccessTokenVersion":2}}'
            echo "Granting permissions to make changes effective..."
            az ad app permission grant --id $WEB_APP_ID --api 00000003-0000-0000-c000-000000000000 --scope "user_impersonation"
          else
            echo "Web app registration already exists."
            WEB_APP_ID=$EXISTING_WEB_APP
          fi
          echo "WEB_APP_CLIENT_ID=$WEB_APP_ID" >> $GITHUB_ENV

      - name: Debug WEB_APP_CLIENT_ID
        run: echo "WEB_APP_CLIENT_ID is ${{ env.WEB_APP_CLIENT_ID }}"

      - name: Log Web App AAD Registration Info
        run: |
          az ad app list --display-name "crypto-pilot-webapp" --query "[0].{appId:appId, id:id, displayName:displayName}" -o json


      - name: Deploy Bicep
        id: deploy_bicep
        run: |
          az deployment group create \
            --resource-group crypto-pilot-rg-dev \
            --template-file .github/workflows/main.bicep \
            --parameters \
              sqlAdminLogin='${{ secrets.SQL_ADMIN_LOGIN }}' \
              sqlAdminPassword='${{ secrets.SQL_ADMIN_PASSWORD }}' \
              acsEmailDomainName='crypto-pilot-email-domain' \
              functionAppClientId='${{ env.FUNCTION_APP_CLIENT_ID }}' \
              webAppClientId='${{ env.WEB_APP_CLIENT_ID }}' \
            --output json > bicep_output.json

      - name: Get function app name from Bicep output
        id: get_funcapp_name
        run: |
          echo "FUNCTION_APP_NAME=$(jq -r '.properties.outputs.functionAppName.value' bicep_output.json)" >> $GITHUB_ENV

      - name: Get web app name from Bicep output
        id: get_webapp_name
        run: |
          WEBAPP_NAME=$(jq -r '.properties.outputs.webAppName.value' bicep_output.json)
          if [ -z "$WEBAPP_NAME" ]; then
            echo "Error: WEBAPP_NAME is not set. Check Bicep output."
            exit 1
          fi
          echo "WEBAPP_NAME=$WEBAPP_NAME" >> $GITHUB_ENV

      - name: Get SQL server and database names from Bicep output
        id: get_sql_names
        run: |
          echo "SQL_SERVER_NAME=$(jq -r '.properties.outputs.sqlServerName.value' bicep_output.json)" >> $GITHUB_ENV
          echo "SQL_DATABASE_NAME=$(jq -r '.properties.outputs.sqlDatabaseName.value' bicep_output.json)" >> $GITHUB_ENV

      - name: Get email sender address and domain resource id from Bicep output
        id: get_email_settings
        run: |
          echo "EMAIL_SENDER_ADDRESS=$(jq -r '.properties.outputs.emailSenderAddress.value' bicep_output.json)" >> $GITHUB_ENV
          echo "EMAIL_DOMAIN_RESOURCE_ID=$(jq -r '.properties.outputs.acsEmailDomainResourceId.value' bicep_output.json)" >> $GITHUB_ENV

      # .NET setup with cache
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Publish Azure Function
        run: |
          dotnet publish ./Crypto.Pylot.Functions/Crypto_Pylot_Functions.csproj -c Release -o ./publish_output

      - name: Deploy to Azure Function App
        uses: azure/functions-action@v1
        with:
          app-name: ${{ env.FUNCTION_APP_NAME }}
          package: ./publish_output

      - name: Configure Function App CORS
        run: |
          az functionapp cors add -g crypto-pilot-rg-dev -n "${{ env.FUNCTION_APP_NAME }}" --allowed-origins "https://${{ env.SWA_URL }}"
          az functionapp cors add -g crypto-pilot-rg-dev -n "${{ env.FUNCTION_APP_NAME }}" --allowed-origins "http://localhost:5173"

      # Check and install sqlcmd only if needed
      - name: Check if sqlcmd is installed
        id: check-sqlcmd
        shell: bash
        run: |
          if command -v sqlcmd >/dev/null 2>&1; then
            echo "available=true" >> $GITHUB_OUTPUT
          else
            echo "available=false" >> $GITHUB_OUTPUT
          fi

      - name: Install sqlcmd on Linux
        if: runner.os == 'Linux' && steps.check-sqlcmd.outputs.available != 'true'
        shell: bash
        run: |
          set -e
          curl https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/prod.list | sudo tee /etc/apt/sources.list.d/mssql-release.list
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y msodbcsql18 mssql-tools18
          echo 'export PATH="$PATH:/opt/mssql-tools18/bin"' >> ~/.bashrc
          source ~/.bashrc
          echo '/opt/mssql-tools18/bin' >> $GITHUB_PATH

      - name: Add GitHub Actions runner IP to Azure SQL Server firewall
        env:
          AZURE_SQL_SERVER: ${{ env.SQL_SERVER_NAME }}
        run: |
          IP=$(curl -s https://api.ipify.org)
          az sql server firewall-rule create \
            --resource-group crypto-pilot-rg-dev \
            --server $AZURE_SQL_SERVER \
            --name "github-actions-runner" \
            --start-ip-address $IP \
            --end-ip-address $IP

      - name: Deploy database schema
        env:
          SQL_SERVER: ${{ env.SQL_SERVER_NAME }}
          SQL_DB: ${{ env.SQL_DATABASE_NAME }}
          SQL_USER: ${{ secrets.SQL_ADMIN_LOGIN }}
          SQL_PASSWORD: ${{ secrets.SQL_ADMIN_PASSWORD }}
        run: |
          sqlcmd -S "$SQL_SERVER.database.windows.net" -d "$SQL_DB" -U "$SQL_USER" -P "$SQL_PASSWORD" -i "./Crypto.Pilot.Database/create-tables.sql"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ./Crypto.Pilot.Web/package-lock.json

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: ./Crypto.Pilot.Web/node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('Crypto.Pilot.Web/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install dependencies (web)
        working-directory: ./Crypto.Pilot.Web
        run: npm ci

      - name: Retrieve Function App URL and Tenant ID
        id: retrieve_env_vars
        run: |
          FUNCTION_URL=$(az functionapp show --name "${{ env.FUNCTION_APP_NAME }}" --resource-group "crypto-pilot-rg-dev" --query "defaultHostName" -o tsv)
          TENANT_ID=$(az account show --query tenantId -o tsv)
          echo "FUNCTION_URL=https://${FUNCTION_URL}" >> $GITHUB_ENV
          echo "TENANT_ID=${TENANT_ID}" >> $GITHUB_ENV

      - name: Ensure Web App Client ID is Set
        run: |
          if [ -z "${{ env.WEB_APP_CLIENT_ID }}" ]; then
            echo "Error: WEB_APP_CLIENT_ID is not set. Ensure the Web App AAD registration step has run successfully."
            exit 1
          fi

      - run: echo "Using $VITE_BACKEND_BASE_URL $VITE_AZURE_AD_CLIENT_ID $VITE_MSAL_TENANT_ID"
        env:
          VITE_BACKEND_BASE_URL: ${{ env.FUNCTION_URL }}/
          VITE_AZURE_AD_CLIENT_ID: ${{ env.WEB_APP_CLIENT_ID }}
          VITE_MSAL_TENANT_ID: ${{ env.TENANT_ID }}

      - name: Build React app
        working-directory: ./Crypto.Pilot.Web
        env:
          VITE_BACKEND_BASE_URL: ${{ env.FUNCTION_URL }}/
          VITE_AZURE_AD_CLIENT_ID: ${{ env.WEB_APP_CLIENT_ID }}
          VITE_MSAL_TENANT_ID: ${{ env.TENANT_ID }}
        run: npm run build

      - name: Get Static Web App Deployment Token
        id: get_swa_token
        run: |
          DEPLOYMENT_TOKEN=$(az staticwebapp secrets list --name "crypto-pilot-webapp" --resource-group "crypto-pilot-rg-dev" --query "properties.apiKey" -o tsv)
          if [ -z "$DEPLOYMENT_TOKEN" ]; then
            echo "Error: Failed to retrieve Static Web App deployment token."
            exit 1
          fi
          echo "DEPLOYMENT_TOKEN=$DEPLOYMENT_TOKEN" >> $GITHUB_ENV

      - name: Deploy to Azure Static Web App
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ env.DEPLOYMENT_TOKEN }}
          app_location: './Crypto.Pilot.Web'
          output_location: 'dist'
          skip_app_build: true
          action: "upload"
          skip_api_build: true
          is_static_export: true
          production_branch: "main"

